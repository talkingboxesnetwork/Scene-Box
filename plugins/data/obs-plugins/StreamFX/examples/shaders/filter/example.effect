// Always provided by OBS
uniform float4x4 ViewProj<
	bool visible = false;
	string name = "View Projection Matrix";
>;

// Provided by Stream Effects
uniform float4 Time<
	bool visible = false;
	string name = "Time Array";
	string description = "A float4 value containing the total time, rendering time and the time since the last tick. The last value is a random number between 0 and 1.";
>;
uniform float4x4 Random<
	bool visible = false;
	string name = "Random Array";
	string description = "A float4x4 value containing random values between 0 and 1";
>;
uniform texture2d ImageSource<
	bool visible = false;
	string name = "Source Texture (Filter, Transition)";
>;
uniform float2 ImageSource_Size<
	bool visible = false;
	string name = "Source Texture Size (Filter, Transition)";
>;
uniform float2 ImageSource_Texel<
	bool visible = false;
	string name = "Source Texture Texel Size (Filter, Transition)";
>;

// Shader Parameters
uniform float4 p_my_val<
	bool visible = true;
	string name = "This is a Value";
	float4 minimum = {0., 0., 0., 0.};
	float4 maximum = {1., 1., 1., 1.};
	float4 step = {.01, .01, .01, .01};
> = {0., 0., 0., 1.};
uniform float p_hue_shift <
	bool visible = true;
	string name = "Hue Shift";
	string mode = "slider"; // Default is input/spinbox
	float minimum = -180.0;
	float maximum = 180.0;
	float step = 0.01;
> = 0.0;

uniform float p_flag_amplitude <
	bool visible = true;
	string name = "Flag Amplitude";
	string mode = "slider"; // Default is input/spinbox
	float minimum = 0.01;
	float maximum = 100.0;
	float step = 0.01;
> = 1.0;
uniform float p_flag_speed <
	bool visible = true;
	string name = "Flag Speed";
	string mode = "slider"; // Default is input/spinbox
	float minimum = 0.01;
	float maximum = 100.0;
	float step = 0.01;
> = 1.0;
uniform float p_flag_whatever <
	bool visible = true;
	string name = "Flag Repeats";
	string mode = "slider"; // Default is input/spinbox
	float minimum = 0.01;
	float maximum = 100.0;
	float step = 0.01;
> = 8.0;


// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Wrap;
	AddressV  = Wrap;
	Filter    = Linear;
};
sampler_state def_sampler2 {
	AddressU  = Border;
	AddressV  = Border;
	Filter    = Linear;
	Border = 0000000000;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct FragData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

FragData VSDefault(VertData v_in) {
	FragData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

// ---------- Random Color
float4 PS_Random(FragData v_in) : TARGET {
	return float4(Random[0][0], Random[0][1], Random[0][2], 1.0); 
}

technique Random
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PS_Random(v_in);
	}
}

// ---------- Fixed Color 
float4 PS_Fixed(FragData v_in) : TARGET {
	return p_my_val; 
}

technique Fixed
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PS_Fixed(v_in); 
	}
}

// ---------- Isolate Hue
float4 RGBtoHSV(float4 RGBA) {
	const float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	const float e = 1.0e-10;	
	float4 p = lerp(float4(RGBA.bg, K.wz), float4(RGBA.gb, K.xy), step(RGBA.b, RGBA.g));
	float4 q = lerp(float4(p.xyw, RGBA.r), float4(RGBA.r, p.yzx), step(p.x, RGBA.r));	
	float d = q.x - min(q.w, q.y);
	return float4(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x, RGBA.a);
}

float4 HSVtoRGB(float4 HSVA) {
	const float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	float4 v = float4(0,0,0,0);
	v.rgb = HSVA.z * lerp(K.xxx, clamp(abs(frac(HSVA.xxx + K.xyz) * 6.0 - K.www) - K.xxx, 0.0, 1.0), HSVA.y);
	v.a = HSVA.a;
	return v;
}

float4 PS_HueShift(FragData v_in) : TARGET {
	float4 v = ImageSource.Sample(def_sampler, v_in.uv); 
	
	float4 hsv = RGBtoHSV(v);
	hsv.r = hsv.r + p_hue_shift;
	return HSVtoRGB(hsv);	
}

technique HueShift
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PS_HueShift(v_in);
	}
}

// ---------- Flag
float4 PS_Flag(FragData v_in) : TARGET {
	float time = Time.y * p_flag_speed + v_in.uv.x * p_flag_whatever;
	float v_offset = sin(time) + cos(Time.x);
	float pi = 3.141;
	float v_orig = v_offset;
	v_offset = lerp(v_offset, v_orig * 0.25, 0.5 + cos(time + pi / 3) * 0.5);
	v_offset = lerp(v_offset, v_orig * 0.125, 0.5 + sin(time + pi / 3 * 2) * 0.5);
	v_offset = lerp(v_offset, v_orig * 0.333, 0.5 + cos(time + pi) * 0.5);
	v_offset = lerp(v_offset, v_orig * 0.4, 0.5 + sin(time + pi / 3 * 4) * 0.5);
	v_offset = lerp(v_offset, v_orig * 0.2, 0.5 + cos(time + pi / 3 * 5) * 0.5);
	v_offset *= v_in.uv.x;
	
	float d = p_flag_amplitude * ImageSource_Texel.y * 2;
	v_in.uv.x *= 1.0;
	v_in.uv.y = v_in.uv.y + v_offset * d;
	v_in.uv.y -= d / 2.;
	v_in.uv.y *= 1.0 / (1.0 - d);
	return ImageSource.Sample(def_sampler2, v_in.uv);
}

technique Flag
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PS_Flag(v_in);
	}
}

// ---------- Pass Through
float4 PS_Draw(FragData v_in) : TARGET {
	return ImageSource.Sample(def_sampler, v_in.uv); 
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PS_Draw(v_in);
	}
}
